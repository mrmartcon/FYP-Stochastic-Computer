#define initClk PORTD &= ~_BV(PORTD3)
#define initSel PORTD &= ~_BV(PORTD7)
#define initSel2 PORTG |= _BV(PORTG2)
#define initCounterClear PORTG &= ~_BV(PORTG0)
#define toggleClk PORTD ^= _BV(PORTD3)
#define toggleSel PORTD ^= _BV(PORTD7)
#define toggleSel2 PORTG ^= _BV(PORTG2)
#define toggleCounterClear PORTG ^= _BV(PORTG0)

int sel = 38;
int sel2 = 39;
int rstn = 40;
int rstcntr = 41;
int cp = 18;

float factors[2] = {0.0,0.0};
int index = 0;


void setup() {
  pinMode(sel,OUTPUT);
  pinMode(sel2,OUTPUT);
  pinMode(rstn,OUTPUT);
  pinMode(cp,OUTPUT);
  pinMode(rstcntr,OUTPUT);

  DDRA = B00000000; //read port A for counter value;
  DDRC = B11111111; //write to port C for number 1;
  DDRL = B11111111; //write to port L for number 2;

  setupMultiply();
  
  Serial.begin(9600);

  factors[0] = 0.4;
  factors[1] = 0.5;

  float ans = stochasticMultiply(factors[0],factors[1]);
  Serial.println(ans);
}

void setupMultiply(){
  initClk;  //set clock low
  
  initSel;  //Set sel low
  initSel2;   //Set sel2 high
  
  /*Turn all outputs to low*/
  PORTG &= ~_BV(PORTG1);
  PORTG |= _BV(PORTG1);

  /*Read in high to shift register*/
  toggleClk;
  toggleClk;
  
  toggleSel2; //toggle sel2 low
  
  toggleClk;
  toggleClk;

   /*Now set input to shift register as output from XOR gates*/
  toggleSel; //toggle sel high
  toggleSel2; //toggle sel2 high

  initCounterClear;
  toggleCounterClear;
}

byte convertFloat(float f){
  int16_t shift=0;
  int32_t mantissa;
  byte val;
  while(f < 1.0){
    f *= 2.0;
    shift--;
  }
  f = f - 1.0;
  mantissa = f*(0x800000 + 0.5f);
  mantissa = (mantissa>>1) + 0x400000;
  val = mantissa>>(14-shift);
  Serial.println(val,BIN);
  return val;
}

float stochasticMultiply(float f1, float f2){

  float x = PINA;
  Serial.print("Initial Counter: ");
  Serial.println(x);
  
  PORTC = convertFloat(f1);
  PORTL = convertFloat(f2);

  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  toggleClk;
  float product = PINA/255.0;

  toggleCounterClear;
  toggleCounterClear;

  return product;
}

void loop() {}
